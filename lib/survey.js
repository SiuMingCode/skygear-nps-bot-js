'use strict';

const skygear = require('skygear');
const db = require('./db');

class Survey {
  constructor(record) {
    this._record = record;
  }

  static get Record() {
    return skygear.Record.extend('survey');
  }

  static create(teamID, frequency, excludedUsersID, scheduledDatetime) {
    let isSent = false;
    let record = new Survey.Record({ teamID, frequency, excludedUsersID, scheduledDatetime, isSent });
    return db.save(record).then(record => new Survey(record));
  }

  static scheduledBy(teamID) {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', teamID);
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error(`Mutiple scheduled surveys found for team ${teamID}`);
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  static get readyToSend() {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('isSent', false);
    query.lessThanOrEqualTo('scheduledDatetime', new Date());
    return db.query(query).then(result => {
      let records = [];
      for (let i = 0; i < result.length; i++) {
        records.push(new Survey(result[i]));
      }
      return records;
    });
  }

  get id() {
    return this._record['id'];
  }

  get teamID() {
    return this._record['teamID'];
  }

  get frequency() {
    return this._record['frequency'];
  }

  get excludedUsersID() {
    return this._record['excludedUsersID'];
  }

  get scheduledDatetime() {
    return this._record['scheduledDatetime'];
  }

  set isSent(flag) {
    this._record['isSent'] = flag;
    db.save(this._record);
  }

  get q1() {
    return {
      text: 'How likely is it you would recommend this company as a place to work?',
      attachments: [{
        text: 'Choose a score from 10 (hightest) to 1 (lowest)',
        fallback: 'You are unable to select a score',
        callback_id: 'saveScoreAndRequestReason',
        actions: [{
          name: 'scores',
          type: 'select',
          options: [{
            text: '10',
            value: JSON.stringify({
              score: 10,
              surveyID: this.id
            })
          }]
        }]
      }]
    };
  }
}

module.exports = Survey;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXJ2ZXkuanMiXSwibmFtZXMiOlsic2t5Z2VhciIsInJlcXVpcmUiLCJkYiIsIlN1cnZleSIsImNvbnN0cnVjdG9yIiwicmVjb3JkIiwiX3JlY29yZCIsIlJlY29yZCIsImV4dGVuZCIsImNyZWF0ZSIsInRlYW1JRCIsImZyZXF1ZW5jeSIsImV4Y2x1ZGVkVXNlcnNJRCIsInNjaGVkdWxlZERhdGV0aW1lIiwiaXNTZW50Iiwic2F2ZSIsInRoZW4iLCJzY2hlZHVsZWRCeSIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJyZWFkeVRvU2VuZCIsImxlc3NUaGFuT3JFcXVhbFRvIiwiRGF0ZSIsInJlY29yZHMiLCJpIiwicHVzaCIsImlkIiwiZmxhZyIsInExIiwidGV4dCIsImF0dGFjaG1lbnRzIiwiZmFsbGJhY2siLCJjYWxsYmFja19pZCIsImFjdGlvbnMiLCJuYW1lIiwidHlwZSIsIm9wdGlvbnMiLCJ2YWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzY29yZSIsInN1cnZleUlEIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxLQUFLRCxRQUFRLE1BQVIsQ0FBWDs7QUFFQSxNQUFNRSxNQUFOLENBQWE7QUFDWEMsY0FBYUMsTUFBYixFQUFxQjtBQUNuQixTQUFLQyxPQUFMLEdBQWVELE1BQWY7QUFDRDs7QUFFRCxhQUFXRSxNQUFYLEdBQXFCO0FBQ25CLFdBQU9QLFFBQVFPLE1BQVIsQ0FBZUMsTUFBZixDQUFzQixRQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBT0MsTUFBUCxDQUFlQyxNQUFmLEVBQXVCQyxTQUF2QixFQUFrQ0MsZUFBbEMsRUFBbURDLGlCQUFuRCxFQUFzRTtBQUNwRSxRQUFJQyxTQUFTLEtBQWI7QUFDQSxRQUFJVCxTQUFTLElBQUlGLE9BQU9JLE1BQVgsQ0FBa0IsRUFBRUcsTUFB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OEZiZ0IsT0FBT0MsT0FBUCxHQUFpQjVDLE1BQWpCIiwiZmlsZSI6InN1cnZleS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNreWdlYXIgPSByZXF1aXJlKCdza3lnZWFyJylcbmNvbnN0IGRiID0gcmVxdWlyZSgnLi9kYicpXG5cbmNsYXNzIFN1cnZleSB7XG4gIGNvbnN0cnVjdG9yIChyZWNvcmQpIHtcbiAgICB0aGlzLl9yZWNvcmQgPSByZWNvcmRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgUmVjb3JkICgpIHtcbiAgICByZXR1cm4gc2t5Z2Vhci5SZWNvcmQuZXh0ZW5kKCdzdXJ2ZXknKVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZSAodGVhbUlELCBmcmVxdWVuY3ksIGV4Y2x1ZGVkVXNlcnNJRCwgc2NoZWR1bGVkRGF0ZXRpbWUpIHtcbiAgICBsZXQgaXNTZW50ID0gZmFsc2VcbiAgICBsZXQgcmVjb3JkID0gbmV3IFN1cnZleS5SZWNvcmQoeyB0ZWFtSUQsIGZyZXF1ZW5jeSwgZXhjbHVkZWRVc2Vyc0lELCBzY2hlZHVsZWREYXRldGltZSwgaXNTZW50IH0pXG4gICAgcmV0dXJuIGRiLnNhdmUocmVjb3JkKS50aGVuKHJlY29yZCA9PiBuZXcgU3VydmV5KHJlY29yZCkpXG4gIH1cblxuICBzdGF0aWMgc2NoZWR1bGVkQnkgKHRlYW1JRCkge1xuICAgIGxldCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFN1cnZleS5SZWNvcmQpXG4gICAgcXVlcnkuZXF1YWxUbygndGVhbUlEJywgdGVhbUlEKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ2lzU2VudCcsIGZhbHNlKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTXV0aXBsZSBzY2hlZHVsZWQgc3VydmV5cyBmb3VuZCBmb3IgdGVhbSAke3RlYW1JRH1gKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdFswXSA/IG5ldyBTdXJ2ZXkocmVzdWx0WzBdKSA6IG51bGxcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGdldCByZWFkeVRvU2VuZCAoKSB7XG4gICAgbGV0IHF1ZXJ5ID0gbmV3IHNreWdlYXIuUXVlcnkoU3VydmV5LlJlY29yZClcbiAgICBxdWVyeS5lcXVhbFRvKCdpc1NlbnQnLCBmYWxzZSlcbiAgICBxdWVyeS5sZXNzVGhhbk9yRXF1YWxUbygnc2NoZWR1bGVkRGF0ZXRpbWUnLCBuZXcgRGF0ZSgpKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgbGV0IHJlY29yZHMgPSBbXVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVjb3Jkcy5wdXNoKG5ldyBTdXJ2ZXkocmVzdWx0W2ldKSlcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWNvcmRzXG4gICAgfSlcbiAgfVxuXG4gIGdldCBpZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsnaWQnXVxuICB9XG5cbiAgZ2V0IHRlYW1JRCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsndGVhbUlEJ11cbiAgfVxuXG4gIGdldCBmcmVxdWVuY3kgKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRbJ2ZyZXF1ZW5jeSddXG4gIH1cblxuICBnZXQgZXhjbHVkZWRVc2Vyc0lEICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkWydleGNsdWRlZFVzZXJzSUQnXVxuICB9XG5cbiAgZ2V0IHNjaGVkdWxlZERhdGV0aW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkWydzY2hlZHVsZWREYXRldGltZSddXG4gIH1cblxuICBzZXQgaXNTZW50IChmbGFnKSB7XG4gICAgdGhpcy5fcmVjb3JkWydpc1NlbnQnXSA9IGZsYWdcbiAgICBkYi5zYXZlKHRoaXMuX3JlY29yZClcbiAgfVxuXG4gIGdldCBxMSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6ICdIb3cgbGlrZWx5IGlzIGl0IHlvdSB3b3VsZCByZWNvbW1lbmQgdGhpcyBjb21wYW55IGFzIGEgcGxhY2UgdG8gd29yaz8nLFxuICAgICAgYXR0YWNobWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6ICdDaG9vc2UgYSBzY29yZSBmcm9tIDEwIChoaWdodGVzdCkgdG8gMSAobG93ZXN0KScsXG4gICAgICAgICAgZmFsbGJhY2s6ICdZb3UgYXJlIHVuYWJsZSB0byBzZWxlY3QgYSBzY29yZScsXG4gICAgICAgICAgY2FsbGJhY2tfaWQ6ICdzYXZlU2NvcmVBbmRSZXF1ZXN0UmVhc29uJyxcbiAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdzY29yZXMnLFxuICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHRleHQ6ICcxMCcsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBzY29yZTogMTAsXG4gICAgICAgICAgICAgICAgICAgIHN1cnZleUlEOiB0aGlzLmlkXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1cnZleVxuIl19