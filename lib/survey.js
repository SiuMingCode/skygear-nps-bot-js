'use strict';

const moment = require('moment');
const skygear = require('skygear');
const { DEVELOPMENT_MODE } = require('./config');
const db = require('./db');
const Reply = require('./reply');

class Survey {
  constructor(record) {
    this._record = record;
  }

  static get Record() {
    return skygear.Record.extend('survey');
  }

  static create(teamID, frequency, excludedUsersID, scheduledDatetime) {
    let isSent = false;
    let isClosed = false;
    let record = new Survey.Record({
      teamID,
      frequency,
      excludedUsersID,
      scheduledDatetime,
      isSent,
      isClosed
    });
    return db.save(record).then(record => new Survey(record));
  }

  get id() {
    return this._record['id'];
  }

  get teamID() {
    return this._record['teamID'];
  }

  get frequency() {
    return this._record['frequency'];
  }

  get excludedUsersID() {
    return this._record['excludedUsersID'];
  }

  get scheduledDatetime() {
    return this._record['scheduledDatetime'];
  }

  get isSent() {
    return this._record['isSent'];
  }

  get isClosed() {
    return this._record['isClosed'];
  }

  static of(id) {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('_id', id);
    return db.query(query).then(result => result[0] ? new Survey(result[0]) : null);
  }

  static scheduledBy(teamID) {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', teamID);
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error(`Mutiple scheduled surveys found for team ${teamID}`);
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  static openingIn(teamID) {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', teamID);
    query.equalTo('isSent', true);
    query.equalTo('isClosed', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error(`Mutiple opening surveys found for team ${teamID}`);
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  static get timeToSend() {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('isSent', false);
    query.lessThanOrEqualTo('scheduledDatetime', new Date());
    return db.query(query).then(result => {
      let records = [];
      for (let i = 0; i < result.length; i++) {
        records.push(new Survey(result[i]));
      }
      return records;
    });
  }

  static get timeToClose() {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('isSent', true);
    query.equalTo('isClosed', false);
    let unit = DEVELOPMENT_MODE ? 'seconds' : 'hours';
    query.greaterThanOrEqualTo('scheduledDatetime', moment().subtract(48, unit).toDate());
    return db.query(query).then(result => {
      let records = [];
      for (let i = 0; i < result.length; i++) {
        records.push(new Survey(result[i]));
      }
      return records;
    });
  }

  set isSent(newValue) {
    this._record['isSent'] = newValue;
  }

  set isClosed(newValue) {
    this._record['isClosed'] = newValue;
  }

  update() {
    return db.save(this._record).then(record => new Survey(record));
  }

  get replies() {
    return Reply.of(this.id);
  }

  get q1() {
    return {
      text: 'How likely is it you would recommend this company as a place to work?',
      attachments: [{
        text: 'Choose a score from 10 (hightest) to 1 (lowest)',
        fallback: 'You are unable to select a score',
        callback_id: 'saveScoreAndRequestReason',
        actions: [{
          name: 'scores',
          type: 'select',
          options: [{
            text: '10',
            value: JSON.stringify({
              score: 10,
              surveyID: this.id
            })
          }, {
            text: '9',
            value: JSON.stringify({
              score: 9,
              surveyID: this.id
            })
          }, {
            text: '8',
            value: JSON.stringify({
              score: 8,
              surveyID: this.id
            })
          }, {
            text: '7',
            value: JSON.stringify({
              score: 7,
              surveyID: this.id
            })
          }, {
            text: '6',
            value: JSON.stringify({
              score: 6,
              surveyID: this.id
            })
          }, {
            text: '5',
            value: JSON.stringify({
              score: 5,
              surveyID: this.id
            })
          }, {
            text: '4',
            value: JSON.stringify({
              score: 4,
              surveyID: this.id
            })
          }, {
            text: '3',
            value: JSON.stringify({
              score: 3,
              surveyID: this.id
            })
          }, {
            text: '2',
            value: JSON.stringify({
              score: 2,
              surveyID: this.id
            })
          }, {
            text: '1',
            value: JSON.stringify({
              score: 1,
              surveyID: this.id
            })
          }]
        }]
      }]
    };
  }
}

module.exports = Survey;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,