'use strict';

const skygear = require('skygear');
const db = require('./db');

class Survey {
  constructor(record) {
    this._record = record;
  }

  static get Record() {
    return skygear.Record.extend('survey');
  }

  static create(teamID, excludedUsersID, scheduledDatetime) {
    let isSent = false;
    let record = new Survey.Record({ teamID, excludedUsersID, scheduledDatetime, isSent });
    return db.save(record).then(record => new Survey(record));
  }

  static scheduledBy(teamID) {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', teamID);
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error(`Mutiple scheduled surveys found for team ${teamID}`);
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  get id() {
    return this._record['id'];
  }

  get teamID() {
    return this._record['teamID'];
  }

  get excludedUsersID() {
    return this._record['excludedUsersID'];
  }

  set isSent(flag) {
    this._record['isSent'] = flag;
    db.save(this._record);
  }

  get q1() {
    return {
      text: 'How likely is it you would recommend this company as a place to work?',
      attachments: [{
        text: 'Choose a score from 10 (hightest) to 1 (lowest)',
        fallback: 'You are unable to select a score',
        callback_id: 'saveScoreAndRequestReason',
        actions: [{
          name: 'scores',
          type: 'select',
          options: [{
            text: '10',
            value: JSON.stringify({
              score: 10,
              surveyID: this.id
            })
          }]
        }]
      }]
    };
  }
}

module.exports = Survey;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXJ2ZXkuanMiXSwibmFtZXMiOlsic2t5Z2VhciIsInJlcXVpcmUiLCJkYiIsIlN1cnZleSIsImNvbnN0cnVjdG9yIiwicmVjb3JkIiwiX3JlY29yZCIsIlJlY29yZCIsImV4dGVuZCIsImNyZWF0ZSIsInRlYW1JRCIsImV4Y2x1ZGVkVXNlcnNJRCIsInNjaGVkdWxlZERhdGV0aW1lIiwiaXNTZW50Iiwic2F2ZSIsInRoZW4iLCJzY2hlZHVsZWRCeSIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJpZCIsImZsYWciLCJxMSIsInRleHQiLCJhdHRhY2htZW50cyIsImZhbGxiYWNrIiwiY2FsbGJhY2tfaWQiLCJhY3Rpb25zIiwibmFtZSIsInR5cGUiLCJvcHRpb25zIiwidmFsdWUiLCJKU09OIiwic3RyaW5naWZ5Iiwic2NvcmUiLCJzdXJ2ZXlJRCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQ0EsTUFBTUMsS0FBS0QsUUFBUSxNQUFSLENBQVg7O0FBRUEsTUFBTUUsTUFBTixDQUFhO0FBQ1hDLGNBQWFDLE1BQWIsRUFBcUI7QUFDbkIsU0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0Q7O0FBRUQsYUFBV0UsTUFBWCxHQUFxQjtBQUNuQixXQUFPUCxRQUFRTyxNQUFSLENBQWVDLE1BQWYsQ0FBc0IsUUFBdEIsQ0FBUDtBQUNEOztBQUVELFNBQU9DLE1BQVAsQ0FBZUMsTUFBZixFQUF1QkMsZUFBdkIsRUFBd0NDLGlCQUF4QyxFQUEyRDtBQUN6RCxRQUFJQyxTQUFTLEtBQWI7QUFDQSxRQUFJUixTQUFTLElBQUlGLE9BQU9JLE1BQVgsQ0FBa0IsRUFBRUcsTUFBRixFQUFVQyxlQUFWLEVBQTJCQyxpQkFBM0IsRUFBOENDLE1BQTlDLEVBQWxCLENBQWI7QUFDQSxXQUFPWCxHQUFHWSxJQUFILENBQVFULE1BQVIsRUFBZ0JVLElBQWhCLENBQXFCVixVQUFVLElBQUlGLE1BQUosQ0FBV0UsTUFBWCxDQUEvQixDQUFQO0FBQ0Q7O0FBRUQsU0FBT1csV0FBUCxDQUFvQk4sTUFBcEIsRUFBNEI7QUFDMUIsUUFBSU8sUUFBUSxJQUFJakIsUUFBUWtCLEtBQVosQ0FBa0JmLE9BQU9JLE1BQXpCLENBQVo7QUFDQVUsVUFBTUUsT0FBTixDQUFjLFFBQWQsRUFBd0JULE1BQXhCO0FBQ0FPLFVBQU1FLE9BQU4sQ0FBYyxRQUFkLEVBQXdCLEtBQXhCO0FBQ0EsV0FBT2pCLEdBQUdlLEtBQUgsQ0FBU0EsS0FBVCxFQUFnQkYsSUFBaEIsQ0FBcUJLLFVBQVU7QUFDcEMsVUFBSUEsT0FBT0MsTUFBUCxHQUFnQixDQUFwQixFQUF1QjtBQUNyQixjQUFNLElBQUlDLEtBQUosQ0FBVyw0Q0FBMkNaLE1BQU8sRUFBN0QsQ0FBTjtBQUNEO0FBQ0QsYUFBT1UsT0FBTyxDQUFQLElBQVksSUFBSWpCLE1BQUosQ0FBV2lCLE9BQU8sQ0FBUCxDQUFYLENBQVosR0FBb0MsSUFBM0M7QUFDRCxLQUxNLENBQVA7QUFNRDs7QUFFRCxNQUFJRyxFQUFKLEdBQVU7QUFDUixXQUFPLEtBQUtqQixPQUFMLENBQWEsSUFBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUksTUFBSixHQUFjO0FBQ1osV0FBTyxLQUFLSixPQUFMLENBQWEsUUFBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUssZUFBSixHQUF1QjtBQUNyQixXQUFPLEtBQUtMLE9BQUwsQ0FBYSxpQkFBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSU8sTUFBSixDQUFZVyxJQUFaLEVBQWtCO0FBQ2hCLFNBQUtsQixPQUFMLENBQWEsUUFBYixJQUF5QmtCLElBQXpCO0FBQ0F0QixPQUFHWSxJQUFILENBQVEsS0FBS1IsT0FBYjtBQUNEOztBQUVELE1BQUltQixFQUFKLEdBQVU7QUFDUixXQUFPO0FBQ0xDLFlBQU0sdUVBREQ7QUFFTEMsbUJBQWEsQ0FDWDtBQUNFRCxjQUFNLGlEQURSO0FBRUVFLGtCQUFVLGtDQUZaO0FBR0VDLHFCQUFhLDJCQUhmO0FBSUVDLGlCQUFTLENBQ1A7QUFDRUMsZ0JBQU0sUUFEUjtBQUVFQyxnQkFBTSxRQUZSO0FBR0VDLG1CQUFTLENBQ1A7QUFDRVAsa0JBQU0sSUFEUjtBQUVFUSxtQkFBT0MsS0FBS0MsU0FBTCxDQUFlO0FBQ3BCQyxxQkFBTyxFQURhO0FBRXBCQyx3QkFBVSxLQUFLZjtBQUZLLGFBQWY7QUFGVCxXQURPO0FBSFgsU0FETztBQUpYLE9BRFc7QUFGUixLQUFQO0FBeUJEO0FBdEVVOztBQXlFYmdCLE9BQU9DLE9BQVAsR0FBaUJyQyxNQUFqQiIsImZpbGUiOiJzdXJ2ZXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBza3lnZWFyID0gcmVxdWlyZSgnc2t5Z2VhcicpXG5jb25zdCBkYiA9IHJlcXVpcmUoJy4vZGInKVxuXG5jbGFzcyBTdXJ2ZXkge1xuICBjb25zdHJ1Y3RvciAocmVjb3JkKSB7XG4gICAgdGhpcy5fcmVjb3JkID0gcmVjb3JkXG4gIH1cblxuICBzdGF0aWMgZ2V0IFJlY29yZCAoKSB7XG4gICAgcmV0dXJuIHNreWdlYXIuUmVjb3JkLmV4dGVuZCgnc3VydmV5JylcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUgKHRlYW1JRCwgZXhjbHVkZWRVc2Vyc0lELCBzY2hlZHVsZWREYXRldGltZSkge1xuICAgIGxldCBpc1NlbnQgPSBmYWxzZVxuICAgIGxldCByZWNvcmQgPSBuZXcgU3VydmV5LlJlY29yZCh7IHRlYW1JRCwgZXhjbHVkZWRVc2Vyc0lELCBzY2hlZHVsZWREYXRldGltZSwgaXNTZW50IH0pXG4gICAgcmV0dXJuIGRiLnNhdmUocmVjb3JkKS50aGVuKHJlY29yZCA9PiBuZXcgU3VydmV5KHJlY29yZCkpXG4gIH1cblxuICBzdGF0aWMgc2NoZWR1bGVkQnkgKHRlYW1JRCkge1xuICAgIGxldCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFN1cnZleS5SZWNvcmQpXG4gICAgcXVlcnkuZXF1YWxUbygndGVhbUlEJywgdGVhbUlEKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ2lzU2VudCcsIGZhbHNlKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTXV0aXBsZSBzY2hlZHVsZWQgc3VydmV5cyBmb3VuZCBmb3IgdGVhbSAke3RlYW1JRH1gKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdFswXSA/IG5ldyBTdXJ2ZXkocmVzdWx0WzBdKSA6IG51bGxcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGlkICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkWydpZCddXG4gIH1cblxuICBnZXQgdGVhbUlEICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkWyd0ZWFtSUQnXVxuICB9XG5cbiAgZ2V0IGV4Y2x1ZGVkVXNlcnNJRCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsnZXhjbHVkZWRVc2Vyc0lEJ11cbiAgfVxuXG4gIHNldCBpc1NlbnQgKGZsYWcpIHtcbiAgICB0aGlzLl9yZWNvcmRbJ2lzU2VudCddID0gZmxhZ1xuICAgIGRiLnNhdmUodGhpcy5fcmVjb3JkKVxuICB9XG5cbiAgZ2V0IHExICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogJ0hvdyBsaWtlbHkgaXMgaXQgeW91IHdvdWxkIHJlY29tbWVuZCB0aGlzIGNvbXBhbnkgYXMgYSBwbGFjZSB0byB3b3JrPycsXG4gICAgICBhdHRhY2htZW50czogW1xuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogJ0Nob29zZSBhIHNjb3JlIGZyb20gMTAgKGhpZ2h0ZXN0KSB0byAxIChsb3dlc3QpJyxcbiAgICAgICAgICBmYWxsYmFjazogJ1lvdSBhcmUgdW5hYmxlIHRvIHNlbGVjdCBhIHNjb3JlJyxcbiAgICAgICAgICBjYWxsYmFja19pZDogJ3NhdmVTY29yZUFuZFJlcXVlc3RSZWFzb24nLFxuICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ3Njb3JlcycsXG4gICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICBvcHRpb25zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGV4dDogJzEwJyxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgc3VydmV5SUQ6IHRoaXMuaWRcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3VydmV5XG4iXX0=