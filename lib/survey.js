'use strict';

const skygear = require('skygear');
const db = require('./db');

class Survey {
  constructor(record) {
    this._record = record;
  }

  static get Record() {
    return skygear.Record.extend('survey');
  }

  static create(teamID, excludedUsersID, scheduledDatetime) {
    let isSent = false;
    let record = new Survey.Record({ teamID, excludedUsersID, scheduledDatetime, isSent });
    return db.save(record).then(record => new Survey(record));
  }

  static scheduledBy(teamID) {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', teamID);
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error(`Mutiple scheduled surveys found for team ${teamID}`);
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }
}

module.exports = Survey;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdXJ2ZXkuanMiXSwibmFtZXMiOlsic2t5Z2VhciIsInJlcXVpcmUiLCJkYiIsIlN1cnZleSIsImNvbnN0cnVjdG9yIiwicmVjb3JkIiwiX3JlY29yZCIsIlJlY29yZCIsImV4dGVuZCIsImNyZWF0ZSIsInRlYW1JRCIsImV4Y2x1ZGVkVXNlcnNJRCIsInNjaGVkdWxlZERhdGV0aW1lIiwiaXNTZW50Iiwic2F2ZSIsInRoZW4iLCJzY2hlZHVsZWRCeSIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLE1BQU1DLEtBQUtELFFBQVEsTUFBUixDQUFYOztBQUVBLE1BQU1FLE1BQU4sQ0FBYTtBQUNYQyxjQUFhQyxNQUFiLEVBQXFCO0FBQ25CLFNBQUtDLE9BQUwsR0FBZUQsTUFBZjtBQUNEOztBQUVELGFBQVdFLE1BQVgsR0FBcUI7QUFDbkIsV0FBT1AsUUFBUU8sTUFBUixDQUFlQyxNQUFmLENBQXNCLFFBQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFPQyxNQUFQLENBQWVDLE1BQWYsRUFBdUJDLGVBQXZCLEVBQXdDQyxpQkFBeEMsRUFBMkQ7QUFDekQsUUFBSUMsU0FBUyxLQUFiO0FBQ0EsUUFBSVIsU0FBUyxJQUFJRixPQUFPSSxNQUFYLENBQWtCLEVBQUVHLE1BQUYsRUFBVUMsZUFBVixFQUEyQkMsaUJBQTNCLEVBQThDQyxNQUE5QyxFQUFsQixDQUFiO0FBQ0EsV0FBT1gsR0FBR1ksSUFBSCxDQUFRVCxNQUFSLEVBQWdCVSxJQUFoQixDQUFxQlYsVUFBVSxJQUFJRixNQUFKLENBQVdFLE1BQVgsQ0FBL0IsQ0FBUDtBQUNEOztBQUVELFNBQU9XLFdBQVAsQ0FBb0JOLE1BQXBCLEVBQTRCO0FBQzFCLFFBQUlPLFFBQVEsSUFBSWpCLFFBQVFrQixLQUFaLENBQWtCZixPQUFPSSxNQUF6QixDQUFaO0FBQ0FVLFVBQU1FLE9BQU4sQ0FBYyxRQUFkLEVBQXdCVCxNQUF4QjtBQUNBTyxVQUFNRSxPQUFOLENBQWMsUUFBZCxFQUF3QixLQUF4QjtBQUNBLFdBQU9qQixHQUFHZSxLQUFILENBQVNBLEtBQVQsRUFBZ0JGLElBQWhCLENBQXFCSyxVQUFVO0FBQ3BDLFVBQUlBLE9BQU9DLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckIsY0FBTSxJQUFJQyxLQUFKLENBQVcsNENBQTJDWixNQUFPLEVBQTdELENBQU47QUFDRDtBQUNELGFBQU9VLE9BQU8sQ0FBUCxJQUFZLElBQUlqQixNQUFKLENBQVdpQixPQUFPLENBQVAsQ0FBWCxDQUFaLEdBQW9DLElBQTNDO0FBQ0QsS0FMTSxDQUFQO0FBTUQ7QUF6QlU7O0FBNEJiRyxPQUFPQyxPQUFQLEdBQWlCckIsTUFBakIiLCJmaWxlIjoic3VydmV5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2t5Z2VhciA9IHJlcXVpcmUoJ3NreWdlYXInKVxuY29uc3QgZGIgPSByZXF1aXJlKCcuL2RiJylcblxuY2xhc3MgU3VydmV5IHtcbiAgY29uc3RydWN0b3IgKHJlY29yZCkge1xuICAgIHRoaXMuX3JlY29yZCA9IHJlY29yZFxuICB9XG5cbiAgc3RhdGljIGdldCBSZWNvcmQgKCkge1xuICAgIHJldHVybiBza3lnZWFyLlJlY29yZC5leHRlbmQoJ3N1cnZleScpXG4gIH1cblxuICBzdGF0aWMgY3JlYXRlICh0ZWFtSUQsIGV4Y2x1ZGVkVXNlcnNJRCwgc2NoZWR1bGVkRGF0ZXRpbWUpIHtcbiAgICBsZXQgaXNTZW50ID0gZmFsc2VcbiAgICBsZXQgcmVjb3JkID0gbmV3IFN1cnZleS5SZWNvcmQoeyB0ZWFtSUQsIGV4Y2x1ZGVkVXNlcnNJRCwgc2NoZWR1bGVkRGF0ZXRpbWUsIGlzU2VudCB9KVxuICAgIHJldHVybiBkYi5zYXZlKHJlY29yZCkudGhlbihyZWNvcmQgPT4gbmV3IFN1cnZleShyZWNvcmQpKVxuICB9XG5cbiAgc3RhdGljIHNjaGVkdWxlZEJ5ICh0ZWFtSUQpIHtcbiAgICBsZXQgcXVlcnkgPSBuZXcgc2t5Z2Vhci5RdWVyeShTdXJ2ZXkuUmVjb3JkKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ3RlYW1JRCcsIHRlYW1JRClcbiAgICBxdWVyeS5lcXVhbFRvKCdpc1NlbnQnLCBmYWxzZSlcbiAgICByZXR1cm4gZGIucXVlcnkocXVlcnkpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE11dGlwbGUgc2NoZWR1bGVkIHN1cnZleXMgZm91bmQgZm9yIHRlYW0gJHt0ZWFtSUR9YClcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRbMF0gPyBuZXcgU3VydmV5KHJlc3VsdFswXSkgOiBudWxsXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1cnZleVxuIl19