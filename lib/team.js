'use strict';

const skygear = require('skygear');
const Bot = require('./bot');
const db = require('./db');
const Survey = require('./survey');

class Team {
  constructor(record) {
    this._record = record;
  }

  static get Record() {
    return skygear.Record.extend('team');
  }

  static create(slackID, token) {
    let record = new Team.Record({ slackID, token });
    return db.save(record).then(record => new Team(record));
  }

  static of(slackID) {
    let query = new skygear.Query(Team.Record);
    query.equalTo('slackID', slackID);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error('Mutiple identical team records found');
      }
      return result[0] ? new Team(result[0]) : null;
    });
  }

  get slackID() {
    return this._record['slackID'];
  }

  get token() {
    return this._record['token'];
  }

  set token(newValue) {
    this._record['token'] = newValue;
  }

  update() {
    return db.save(this._record).then(record => new Team(record));
  }

  get bot() {
    return new Bot(this.token);
  }

  get members() {
    return this.bot.fetchUsers();
  }

  get scheduledSurvey() {
    return Survey.scheduledBy(this.slackID);
  }

  get openingSurvey() {
    return Survey.openingIn(this.slackID);
  }
}

module.exports = Team;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZWFtLmpzIl0sIm5hbWVzIjpbInNreWdlYXIiLCJyZXF1aXJlIiwiQm90IiwiZGIiLCJTdXJ2ZXkiLCJUZWFtIiwiY29uc3RydWN0b3IiLCJyZWNvcmQiLCJfcmVjb3JkIiwiUmVjb3JkIiwiZXh0ZW5kIiwiY3JlYXRlIiwic2xhY2tJRCIsInRva2VuIiwic2F2ZSIsInRoZW4iLCJvZiIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJuZXdWYWx1ZSIsInVwZGF0ZSIsImJvdCIsIm1lbWJlcnMiLCJmZXRjaFVzZXJzIiwic2NoZWR1bGVkU3VydmV5Iiwic2NoZWR1bGVkQnkiLCJvcGVuaW5nU3VydmV5Iiwib3BlbmluZ0luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxNQUFNRCxRQUFRLE9BQVIsQ0FBWjtBQUNBLE1BQU1FLEtBQUtGLFFBQVEsTUFBUixDQUFYO0FBQ0EsTUFBTUcsU0FBU0gsUUFBUSxVQUFSLENBQWY7O0FBRUEsTUFBTUksSUFBTixDQUFXO0FBQ1RDLGNBQWFDLE1BQWIsRUFBcUI7QUFDbkIsU0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0Q7O0FBRUQsYUFBV0UsTUFBWCxHQUFxQjtBQUNuQixXQUFPVCxRQUFRUyxNQUFSLENBQWVDLE1BQWYsQ0FBc0IsTUFBdEIsQ0FBUDtBQUNEOztBQUVELFNBQU9DLE1BQVAsQ0FBZUMsT0FBZixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsUUFBSU4sU0FBUyxJQUFJRixLQUFLSSxNQUFULENBQWdCLEVBQUVHLE9BQUYsRUFBV0MsS0FBWCxFQUFoQixDQUFiO0FBQ0EsV0FBT1YsR0FBR1csSUFBSCxDQUFRUCxNQUFSLEVBQWdCUSxJQUFoQixDQUFxQlIsVUFBVSxJQUFJRixJQUFKLENBQVNFLE1BQVQsQ0FBL0IsQ0FBUDtBQUNEOztBQUVELFNBQU9TLEVBQVAsQ0FBV0osT0FBWCxFQUFvQjtBQUNsQixRQUFJSyxRQUFRLElBQUlqQixRQUFRa0IsS0FBWixDQUFrQmIsS0FBS0ksTUFBdkIsQ0FBWjtBQUNBUSxVQUFNRSxPQUFOLENBQWMsU0FBZCxFQUF5QlAsT0FBekI7QUFDQSxXQUFPVCxHQUFHYyxLQUFILENBQVNBLEtBQVQsRUFBZ0JGLElBQWhCLENBQXFCSyxVQUFVO0FBQ3BDLFVBQUlBLE9BQU9DLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckIsY0FBTSxJQUFJQyxLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0YsT0FBTyxDQUFQLElBQVksSUFBSWYsSUFBSixDQUFTZSxPQUFPLENBQVAsQ0FBVCxDQUFaLEdBQWtDLElBQXpDO0FBQ0QsS0FMTSxDQUFQO0FBTUQ7O0FBRUQsTUFBSVIsT0FBSixHQUFlO0FBQ2IsV0FBTyxLQUFLSixPQUFMLENBQWEsU0FBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUssS0FBSixHQUFhO0FBQ1gsV0FBTyxLQUFLTCxPQUFMLENBQWEsT0FBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUssS0FBSixDQUFXVSxRQUFYLEVBQXFCO0FBQ25CLFNBQUtmLE9BQUwsQ0FBYSxPQUFiLElBQXdCZSxRQUF4QjtBQUNEOztBQUVEQyxXQUFVO0FBQ1IsV0FBT3JCLEdBQUdXLElBQUgsQ0FBUSxLQUFLTixPQUFiLEVBQXNCTyxJQUF0QixDQUEyQlIsVUFBVSxJQUFJRixJQUFKLENBQVNFLE1BQVQsQ0FBckMsQ0FBUDtBQUNEOztBQUVELE1BQUlrQixHQUFKLEdBQVc7QUFDVCxXQUFPLElBQUl2QixHQUFKLENBQVEsS0FBS1csS0FBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSWEsT0FBSixHQUFlO0FBQ2IsV0FBTyxLQUFLRCxHQUFMLENBQVNFLFVBQVQsRUFBUDtBQUNEOztBQUVELE1BQUlDLGVBQUosR0FBdUI7QUFDckIsV0FBT3hCLE9BQU95QixXQUFQLENBQW1CLEtBQUtqQixPQUF4QixDQUFQO0FBQ0Q7O0FBRUQsTUFBSWtCLGFBQUosR0FBcUI7QUFDbkIsV0FBTzFCLE9BQU8yQixTQUFQLENBQWlCLEtBQUtuQixPQUF0QixDQUFQO0FBQ0Q7QUF2RFE7O0FBMERYb0IsT0FBT0MsT0FBUCxHQUFpQjVCLElBQWpCIiwiZmlsZSI6InRlYW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBza3lnZWFyID0gcmVxdWlyZSgnc2t5Z2VhcicpXG5jb25zdCBCb3QgPSByZXF1aXJlKCcuL2JvdCcpXG5jb25zdCBkYiA9IHJlcXVpcmUoJy4vZGInKVxuY29uc3QgU3VydmV5ID0gcmVxdWlyZSgnLi9zdXJ2ZXknKVxuXG5jbGFzcyBUZWFtIHtcbiAgY29uc3RydWN0b3IgKHJlY29yZCkge1xuICAgIHRoaXMuX3JlY29yZCA9IHJlY29yZFxuICB9XG5cbiAgc3RhdGljIGdldCBSZWNvcmQgKCkge1xuICAgIHJldHVybiBza3lnZWFyLlJlY29yZC5leHRlbmQoJ3RlYW0nKVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZSAoc2xhY2tJRCwgdG9rZW4pIHtcbiAgICBsZXQgcmVjb3JkID0gbmV3IFRlYW0uUmVjb3JkKHsgc2xhY2tJRCwgdG9rZW4gfSlcbiAgICByZXR1cm4gZGIuc2F2ZShyZWNvcmQpLnRoZW4ocmVjb3JkID0+IG5ldyBUZWFtKHJlY29yZCkpXG4gIH1cblxuICBzdGF0aWMgb2YgKHNsYWNrSUQpIHtcbiAgICBsZXQgcXVlcnkgPSBuZXcgc2t5Z2Vhci5RdWVyeShUZWFtLlJlY29yZClcbiAgICBxdWVyeS5lcXVhbFRvKCdzbGFja0lEJywgc2xhY2tJRClcbiAgICByZXR1cm4gZGIucXVlcnkocXVlcnkpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011dGlwbGUgaWRlbnRpY2FsIHRlYW0gcmVjb3JkcyBmb3VuZCcpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0WzBdID8gbmV3IFRlYW0ocmVzdWx0WzBdKSA6IG51bGxcbiAgICB9KVxuICB9XG5cbiAgZ2V0IHNsYWNrSUQgKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRbJ3NsYWNrSUQnXVxuICB9XG5cbiAgZ2V0IHRva2VuICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkWyd0b2tlbiddXG4gIH1cblxuICBzZXQgdG9rZW4gKG5ld1ZhbHVlKSB7XG4gICAgdGhpcy5fcmVjb3JkWyd0b2tlbiddID0gbmV3VmFsdWVcbiAgfVxuXG4gIHVwZGF0ZSAoKSB7XG4gICAgcmV0dXJuIGRiLnNhdmUodGhpcy5fcmVjb3JkKS50aGVuKHJlY29yZCA9PiBuZXcgVGVhbShyZWNvcmQpKVxuICB9XG5cbiAgZ2V0IGJvdCAoKSB7XG4gICAgcmV0dXJuIG5ldyBCb3QodGhpcy50b2tlbilcbiAgfVxuXG4gIGdldCBtZW1iZXJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5ib3QuZmV0Y2hVc2VycygpXG4gIH1cblxuICBnZXQgc2NoZWR1bGVkU3VydmV5ICgpIHtcbiAgICByZXR1cm4gU3VydmV5LnNjaGVkdWxlZEJ5KHRoaXMuc2xhY2tJRClcbiAgfVxuXG4gIGdldCBvcGVuaW5nU3VydmV5ICgpIHtcbiAgICByZXR1cm4gU3VydmV5Lm9wZW5pbmdJbih0aGlzLnNsYWNrSUQpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUZWFtXG4iXX0=