'use strict';

const skygear = require('skygear');
const Bot = require('./bot');
const db = require('./db');
const Survey = require('./survey');

class Team {
  constructor(record) {
    this._record = record;
  }

  static get Record() {
    return skygear.Record.extend('team');
  }

  static create(slackID, token) {
    let record = new Team.Record({ slackID, token });
    return db.save(record).then(record => new Team(record));
  }

  static of(slackID) {
    let query = new skygear.Query(Team.Record);
    query.equalTo('slackID', slackID);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error('Mutiple identical team records found');
      }
      return result[0] ? new Team(result[0]) : null;
    });
  }

  get slackID() {
    return this._record['slackID'];
  }

  get token() {
    return this._record['token'];
  }

  set token(newValue) {
    this._record['token'] = newValue;
  }

  update() {
    return db.save(this._record).then(record => new Team(record));
  }

  get bot() {
    return new Bot(this.token);
  }

  get scheduledSurvey() {
    return Survey.scheduledBy(this.slackID);
  }

  get openingSurvey() {
    return Survey.openingIn(this.slackID);
  }
}

module.exports = Team;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZWFtLmpzIl0sIm5hbWVzIjpbInNreWdlYXIiLCJyZXF1aXJlIiwiQm90IiwiZGIiLCJTdXJ2ZXkiLCJUZWFtIiwiY29uc3RydWN0b3IiLCJyZWNvcmQiLCJfcmVjb3JkIiwiUmVjb3JkIiwiZXh0ZW5kIiwiY3JlYXRlIiwic2xhY2tJRCIsInRva2VuIiwic2F2ZSIsInRoZW4iLCJvZiIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJuZXdWYWx1ZSIsInVwZGF0ZSIsImJvdCIsInNjaGVkdWxlZFN1cnZleSIsInNjaGVkdWxlZEJ5Iiwib3BlbmluZ1N1cnZleSIsIm9wZW5pbmdJbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsVUFBVUMsUUFBUSxTQUFSLENBQWhCO0FBQ0EsTUFBTUMsTUFBTUQsUUFBUSxPQUFSLENBQVo7QUFDQSxNQUFNRSxLQUFLRixRQUFRLE1BQVIsQ0FBWDtBQUNBLE1BQU1HLFNBQVNILFFBQVEsVUFBUixDQUFmOztBQUVBLE1BQU1JLElBQU4sQ0FBVztBQUNUQyxjQUFhQyxNQUFiLEVBQXFCO0FBQ25CLFNBQUtDLE9BQUwsR0FBZUQsTUFBZjtBQUNEOztBQUVELGFBQVdFLE1BQVgsR0FBcUI7QUFDbkIsV0FBT1QsUUFBUVMsTUFBUixDQUFlQyxNQUFmLENBQXNCLE1BQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFPQyxNQUFQLENBQWVDLE9BQWYsRUFBd0JDLEtBQXhCLEVBQStCO0FBQzdCLFFBQUlOLFNBQVMsSUFBSUYsS0FBS0ksTUFBVCxDQUFnQixFQUFFRyxPQUFGLEVBQVdDLEtBQVgsRUFBaEIsQ0FBYjtBQUNBLFdBQU9WLEdBQUdXLElBQUgsQ0FBUVAsTUFBUixFQUFnQlEsSUFBaEIsQ0FBcUJSLFVBQVUsSUFBSUYsSUFBSixDQUFTRSxNQUFULENBQS9CLENBQVA7QUFDRDs7QUFFRCxTQUFPUyxFQUFQLENBQVdKLE9BQVgsRUFBb0I7QUFDbEIsUUFBSUssUUFBUSxJQUFJakIsUUFBUWtCLEtBQVosQ0FBa0JiLEtBQUtJLE1BQXZCLENBQVo7QUFDQVEsVUFBTUUsT0FBTixDQUFjLFNBQWQsRUFBeUJQLE9BQXpCO0FBQ0EsV0FBT1QsR0FBR2MsS0FBSCxDQUFTQSxLQUFULEVBQWdCRixJQUFoQixDQUFxQkssVUFBVTtBQUNwQyxVQUFJQSxPQUFPQyxNQUFQLEdBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLGNBQU0sSUFBSUMsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRDtBQUNELGFBQU9GLE9BQU8sQ0FBUCxJQUFZLElBQUlmLElBQUosQ0FBU2UsT0FBTyxDQUFQLENBQVQsQ0FBWixHQUFrQyxJQUF6QztBQUNELEtBTE0sQ0FBUDtBQU1EOztBQUVELE1BQUlSLE9BQUosR0FBZTtBQUNiLFdBQU8sS0FBS0osT0FBTCxDQUFhLFNBQWIsQ0FBUDtBQUNEOztBQUVELE1BQUlLLEtBQUosR0FBYTtBQUNYLFdBQU8sS0FBS0wsT0FBTCxDQUFhLE9BQWIsQ0FBUDtBQUNEOztBQUVELE1BQUlLLEtBQUosQ0FBV1UsUUFBWCxFQUFxQjtBQUNuQixTQUFLZixPQUFMLENBQWEsT0FBYixJQUF3QmUsUUFBeEI7QUFDRDs7QUFFREMsV0FBVTtBQUNSLFdBQU9yQixHQUFHVyxJQUFILENBQVEsS0FBS04sT0FBYixFQUFzQk8sSUFBdEIsQ0FBMkJSLFVBQVUsSUFBSUYsSUFBSixDQUFTRSxNQUFULENBQXJDLENBQVA7QUFDRDs7QUFFRCxNQUFJa0IsR0FBSixHQUFXO0FBQ1QsV0FBTyxJQUFJdkIsR0FBSixDQUFRLEtBQUtXLEtBQWIsQ0FBUDtBQUNEOztBQUVELE1BQUlhLGVBQUosR0FBdUI7QUFDckIsV0FBT3RCLE9BQU91QixXQUFQLENBQW1CLEtBQUtmLE9BQXhCLENBQVA7QUFDRDs7QUFFRCxNQUFJZ0IsYUFBSixHQUFxQjtBQUNuQixXQUFPeEIsT0FBT3lCLFNBQVAsQ0FBaUIsS0FBS2pCLE9BQXRCLENBQVA7QUFDRDtBQW5EUTs7QUFzRFhrQixPQUFPQyxPQUFQLEdBQWlCMUIsSUFBakIiLCJmaWxlIjoidGVhbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNreWdlYXIgPSByZXF1aXJlKCdza3lnZWFyJylcbmNvbnN0IEJvdCA9IHJlcXVpcmUoJy4vYm90JylcbmNvbnN0IGRiID0gcmVxdWlyZSgnLi9kYicpXG5jb25zdCBTdXJ2ZXkgPSByZXF1aXJlKCcuL3N1cnZleScpXG5cbmNsYXNzIFRlYW0ge1xuICBjb25zdHJ1Y3RvciAocmVjb3JkKSB7XG4gICAgdGhpcy5fcmVjb3JkID0gcmVjb3JkXG4gIH1cblxuICBzdGF0aWMgZ2V0IFJlY29yZCAoKSB7XG4gICAgcmV0dXJuIHNreWdlYXIuUmVjb3JkLmV4dGVuZCgndGVhbScpXG4gIH1cblxuICBzdGF0aWMgY3JlYXRlIChzbGFja0lELCB0b2tlbikge1xuICAgIGxldCByZWNvcmQgPSBuZXcgVGVhbS5SZWNvcmQoeyBzbGFja0lELCB0b2tlbiB9KVxuICAgIHJldHVybiBkYi5zYXZlKHJlY29yZCkudGhlbihyZWNvcmQgPT4gbmV3IFRlYW0ocmVjb3JkKSlcbiAgfVxuXG4gIHN0YXRpYyBvZiAoc2xhY2tJRCkge1xuICAgIGxldCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFRlYW0uUmVjb3JkKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ3NsYWNrSUQnLCBzbGFja0lEKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXV0aXBsZSBpZGVudGljYWwgdGVhbSByZWNvcmRzIGZvdW5kJylcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRbMF0gPyBuZXcgVGVhbShyZXN1bHRbMF0pIDogbnVsbFxuICAgIH0pXG4gIH1cblxuICBnZXQgc2xhY2tJRCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsnc2xhY2tJRCddXG4gIH1cblxuICBnZXQgdG9rZW4gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRbJ3Rva2VuJ11cbiAgfVxuXG4gIHNldCB0b2tlbiAobmV3VmFsdWUpIHtcbiAgICB0aGlzLl9yZWNvcmRbJ3Rva2VuJ10gPSBuZXdWYWx1ZVxuICB9XG5cbiAgdXBkYXRlICgpIHtcbiAgICByZXR1cm4gZGIuc2F2ZSh0aGlzLl9yZWNvcmQpLnRoZW4ocmVjb3JkID0+IG5ldyBUZWFtKHJlY29yZCkpXG4gIH1cblxuICBnZXQgYm90ICgpIHtcbiAgICByZXR1cm4gbmV3IEJvdCh0aGlzLnRva2VuKVxuICB9XG5cbiAgZ2V0IHNjaGVkdWxlZFN1cnZleSAoKSB7XG4gICAgcmV0dXJuIFN1cnZleS5zY2hlZHVsZWRCeSh0aGlzLnNsYWNrSUQpXG4gIH1cblxuICBnZXQgb3BlbmluZ1N1cnZleSAoKSB7XG4gICAgcmV0dXJuIFN1cnZleS5vcGVuaW5nSW4odGhpcy5zbGFja0lEKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGVhbVxuIl19