'use strict';

const skygear = require('skygear');
const Bot = require('./bot');
const db = require('./db');
const Survey = require('./survey');

class Team {
  constructor(record) {
    this._record = record;
  }

  // create
  static get Record() {
    return skygear.Record.extend('team');
  }

  static create(slackID, token) {
    let record = new Team.Record({ slackID, token });
    return db.save(record).then(record => new Team(record));
  }

  // read
  get slackID() {
    return this._record['slackID'];
  }

  get token() {
    return this._record['token'];
  }

  static of(slackID) {
    let query = new skygear.Query(Team.Record);
    query.equalTo('slackID', slackID);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error('Mutiple identical team records found');
      }
      return result[0] ? new Team(result[0]) : null;
    });
  }

  // update
  set token(newValue) {
    this._record['token'] = newValue;
  }

  update() {
    return db.save(this._record).then(record => new Team(record));
  }

  // delete

  // misc
  get bot() {
    return new Bot(this.token);
  }

  get members() {
    return this.bot.fetchUsers();
  }

  get scheduledSurvey() {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error(`Mutiple scheduled surveys found for team ${this.slackID}`);
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }

  get distributedSurvey() {
    let query = new skygear.Query(Survey.Record);
    query.equalTo('teamID', this.slackID);
    query.equalTo('isSent', true);
    query.equalTo('isClosed', false);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error(`Mutiple distributed surveys found for team ${this.slackID}`);
      }
      return result[0] ? new Survey(result[0]) : null;
    });
  }
}

module.exports = Team;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZWFtLmpzIl0sIm5hbWVzIjpbInNreWdlYXIiLCJyZXF1aXJlIiwiQm90IiwiZGIiLCJTdXJ2ZXkiLCJUZWFtIiwiY29uc3RydWN0b3IiLCJyZWNvcmQiLCJfcmVjb3JkIiwiUmVjb3JkIiwiZXh0ZW5kIiwiY3JlYXRlIiwic2xhY2tJRCIsInRva2VuIiwic2F2ZSIsInRoZW4iLCJvZiIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJuZXdWYWx1ZSIsInVwZGF0ZSIsImJvdCIsIm1lbWJlcnMiLCJmZXRjaFVzZXJzIiwic2NoZWR1bGVkU3VydmV5IiwiZGlzdHJpYnV0ZWRTdXJ2ZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLE1BQU1DLE1BQU1ELFFBQVEsT0FBUixDQUFaO0FBQ0EsTUFBTUUsS0FBS0YsUUFBUSxNQUFSLENBQVg7QUFDQSxNQUFNRyxTQUFTSCxRQUFRLFVBQVIsQ0FBZjs7QUFFQSxNQUFNSSxJQUFOLENBQVc7QUFDVEMsY0FBYUMsTUFBYixFQUFxQjtBQUNuQixTQUFLQyxPQUFMLEdBQWVELE1BQWY7QUFDRDs7QUFFRDtBQUNBLGFBQVdFLE1BQVgsR0FBcUI7QUFDbkIsV0FBT1QsUUFBUVMsTUFBUixDQUFlQyxNQUFmLENBQXNCLE1BQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFPQyxNQUFQLENBQWVDLE9BQWYsRUFBd0JDLEtBQXhCLEVBQStCO0FBQzdCLFFBQUlOLFNBQVMsSUFBSUYsS0FBS0ksTUFBVCxDQUFnQixFQUFFRyxPQUFGLEVBQVdDLEtBQVgsRUFBaEIsQ0FBYjtBQUNBLFdBQU9WLEdBQUdXLElBQUgsQ0FBUVAsTUFBUixFQUFnQlEsSUFBaEIsQ0FBcUJSLFVBQVUsSUFBSUYsSUFBSixDQUFTRSxNQUFULENBQS9CLENBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUlLLE9BQUosR0FB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ID0gcmVxdWlyZSgnc2t5Z2VhcicpXG5jb25zdCBCb3QgPSByZXF1aXJlKCcuL2JvdCcpXG5jb25zdCBkYiA9IHJlcXVpcmUoJy4vZGInKVxuY29uc3QgU3VydmV5ID0gcmVxdWlyZSgnLi9zdXJ2ZXknKVxuXG5jbGFzcyBUZWFtIHtcbiAgY29uc3RydWN0b3IgKHJlY29yZCkge1xuICAgIHRoaXMuX3JlY29yZCA9IHJlY29yZFxuICB9XG5cbiAgLy8gY3JlYXRlXG4gIHN0YXRpYyBnZXQgUmVjb3JkICgpIHtcbiAgICByZXR1cm4gc2t5Z2Vhci5SZWNvcmQuZXh0ZW5kKCd0ZWFtJylcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUgKHNsYWNrSUQsIHRva2VuKSB7XG4gICAgbGV0IHJlY29yZCA9IG5ldyBUZWFtLlJlY29yZCh7IHNsYWNrSUQsIHRva2VuIH0pXG4gICAgcmV0dXJuIGRiLnNhdmUocmVjb3JkKS50aGVuKHJlY29yZCA9PiBuZXcgVGVhbShyZWNvcmQpKVxuICB9XG5cbiAgLy8gcmVhZFxuICBnZXQgc2xhY2tJRCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsnc2xhY2tJRCddXG4gIH1cblxuICBnZXQgdG9rZW4gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRbJ3Rva2VuJ11cbiAgfVxuXG4gIHN0YXRpYyBvZiAoc2xhY2tJRCkge1xuICAgIGxldCBxdWVyeSA9IG5ldyBza3lnZWFyLlF1ZXJ5KFRlYW0uUmVjb3JkKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ3NsYWNrSUQnLCBzbGFja0lEKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXV0aXBsZSBpZGVudGljYWwgdGVhbSByZWNvcmRzIGZvdW5kJylcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRbMF0gPyBuZXcgVGVhbShyZXN1bHRbMF0pIDogbnVsbFxuICAgIH0pXG4gIH1cblxuICAvLyB1cGRhdGVcbiAgc2V0IHRva2VuIChuZXdWYWx1ZSkge1xuICAgIHRoaXMuX3JlY29yZFsndG9rZW4nXSA9IG5ld1ZhbHVlXG4gIH1cblxuICB1cGRhdGUgKCkge1xuICAgIHJldHVybiBkYi5zYXZlKHRoaXMuX3JlY29yZCkudGhlbihyZWNvcmQgPT4gbmV3IFRlYW0ocmVjb3JkKSlcbiAgfVxuXG4gIC8vIGRlbGV0ZVxuXG4gIC8vIG1pc2NcbiAgZ2V0IGJvdCAoKSB7XG4gICAgcmV0dXJuIG5ldyBCb3QodGhpcy50b2tlbilcbiAgfVxuXG4gIGdldCBtZW1iZXJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5ib3QuZmV0Y2hVc2VycygpXG4gIH1cblxuICBnZXQgc2NoZWR1bGVkU3VydmV5ICgpIHtcbiAgICBsZXQgcXVlcnkgPSBuZXcgc2t5Z2Vhci5RdWVyeShTdXJ2ZXkuUmVjb3JkKVxuICAgIHF1ZXJ5LmVxdWFsVG8oJ3RlYW1JRCcsIHRoaXMuc2xhY2tJRClcbiAgICBxdWVyeS5lcXVhbFRvKCdpc1NlbnQnLCBmYWxzZSlcbiAgICByZXR1cm4gZGIucXVlcnkocXVlcnkpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE11dGlwbGUgc2NoZWR1bGVkIHN1cnZleXMgZm91bmQgZm9yIHRlYW0gJHt0aGlzLnNsYWNrSUR9YClcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRbMF0gPyBuZXcgU3VydmV5KHJlc3VsdFswXSkgOiBudWxsXG4gICAgfSlcbiAgfVxuXG4gIGdldCBkaXN0cmlidXRlZFN1cnZleSAoKSB7XG4gICAgbGV0IHF1ZXJ5ID0gbmV3IHNreWdlYXIuUXVlcnkoU3VydmV5LlJlY29yZClcbiAgICBxdWVyeS5lcXVhbFRvKCd0ZWFtSUQnLCB0aGlzLnNsYWNrSUQpXG4gICAgcXVlcnkuZXF1YWxUbygnaXNTZW50JywgdHJ1ZSlcbiAgICBxdWVyeS5lcXVhbFRvKCdpc0Nsb3NlZCcsIGZhbHNlKVxuICAgIHJldHVybiBkYi5xdWVyeShxdWVyeSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTXV0aXBsZSBkaXN0cmlidXRlZCBzdXJ2ZXlzIGZvdW5kIGZvciB0ZWFtICR7dGhpcy5zbGFja0lEfWApXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0WzBdID8gbmV3IFN1cnZleShyZXN1bHRbMF0pIDogbnVsbFxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUZWFtXG4iXX0=