'use strict';

const skygear = require('skygear');
const Bot = require('./bot');
const db = require('./db');
const Survey = require('./survey');

class Team {
  constructor(record) {
    this._record = record;
  }

  static get Record() {
    return skygear.Record.extend('team');
  }

  static create(slackID, token) {
    let record = new Team.Record({ slackID, token });
    return db.save(record).then(record => new Team(record));
  }

  static of(slackID) {
    let query = new skygear.Query(Team.Record);
    query.equalTo('slackID', slackID);
    return db.query(query).then(result => {
      if (result.length > 1) {
        throw new Error('Mutiple identical team records found');
      }
      return result[0] ? new Team(result[0]) : null;
    });
  }

  get slackID() {
    return this._record['slackID'];
  }

  get token() {
    return this._record['token'];
  }

  set token(newValue) {
    this._record['token'] = newValue;
  }

  update() {
    return db.save(this._record).then(record => new Team(record));
  }

  get bot() {
    return new Bot(this.token);
  }

  get scheduledSurvey() {
    return Survey.scheduledBy(this.slackID);
  }
}

module.exports = Team;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZWFtLmpzIl0sIm5hbWVzIjpbInNreWdlYXIiLCJyZXF1aXJlIiwiQm90IiwiZGIiLCJTdXJ2ZXkiLCJUZWFtIiwiY29uc3RydWN0b3IiLCJyZWNvcmQiLCJfcmVjb3JkIiwiUmVjb3JkIiwiZXh0ZW5kIiwiY3JlYXRlIiwic2xhY2tJRCIsInRva2VuIiwic2F2ZSIsInRoZW4iLCJvZiIsInF1ZXJ5IiwiUXVlcnkiLCJlcXVhbFRvIiwicmVzdWx0IiwibGVuZ3RoIiwiRXJyb3IiLCJuZXdWYWx1ZSIsInVwZGF0ZSIsImJvdCIsInNjaGVkdWxlZFN1cnZleSIsInNjaGVkdWxlZEJ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxNQUFNQyxNQUFNRCxRQUFRLE9BQVIsQ0FBWjtBQUNBLE1BQU1FLEtBQUtGLFFBQVEsTUFBUixDQUFYO0FBQ0EsTUFBTUcsU0FBU0gsUUFBUSxVQUFSLENBQWY7O0FBRUEsTUFBTUksSUFBTixDQUFXO0FBQ1RDLGNBQWFDLE1BQWIsRUFBcUI7QUFDbkIsU0FBS0MsT0FBTCxHQUFlRCxNQUFmO0FBQ0Q7O0FBRUQsYUFBV0UsTUFBWCxHQUFxQjtBQUNuQixXQUFPVCxRQUFRUyxNQUFSLENBQWVDLE1BQWYsQ0FBc0IsTUFBdEIsQ0FBUDtBQUNEOztBQUVELFNBQU9DLE1BQVAsQ0FBZUMsT0FBZixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsUUFBSU4sU0FBUyxJQUFJRixLQUFLSSxNQUFULENBQWdCLEVBQUVHLE9BQUYsRUFBV0MsS0FBWCxFQUFoQixDQUFiO0FBQ0EsV0FBT1YsR0FBR1csSUFBSCxDQUFRUCxNQUFSLEVBQWdCUSxJQUFoQixDQUFxQlIsVUFBVSxJQUFJRixJQUFKLENBQVNFLE1BQVQsQ0FBL0IsQ0FBUDtBQUNEOztBQUVELFNBQU9TLEVBQVAsQ0FBV0osT0FBWCxFQUFvQjtBQUNsQixRQUFJSyxRQUFRLElBQUlqQixRQUFRa0IsS0FBWixDQUFrQmIsS0FBS0ksTUFBdkIsQ0FBWjtBQUNBUSxVQUFNRSxPQUFOLENBQWMsU0FBZCxFQUF5QlAsT0FBekI7QUFDQSxXQUFPVCxHQUFHYyxLQUFILENBQVNBLEtBQVQsRUFBZ0JGLElBQWhCLENBQXFCSyxVQUFVO0FBQ3BDLFVBQUlBLE9BQU9DLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckIsY0FBTSxJQUFJQyxLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0YsT0FBTyxDQUFQLElBQVksSUFBSWYsSUFBSixDQUFTZSxPQUFPLENBQVAsQ0FBVCxDQUFaLEdBQWtDLElBQXpDO0FBQ0QsS0FMTSxDQUFQO0FBTUQ7O0FBRUQsTUFBSVIsT0FBSixHQUFlO0FBQ2IsV0FBTyxLQUFLSixPQUFMLENBQWEsU0FBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUssS0FBSixHQUFhO0FBQ1gsV0FBTyxLQUFLTCxPQUFMLENBQWEsT0FBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSUssS0FBSixDQUFXVSxRQUFYLEVBQXFCO0FBQ25CLFNBQUtmLE9BQUwsQ0FBYSxPQUFiLElBQXdCZSxRQUF4QjtBQUNEOztBQUVEQyxXQUFVO0FBQ1IsV0FBT3JCLEdBQUdXLElBQUgsQ0FBUSxLQUFLTixPQUFiLEVBQXNCTyxJQUF0QixDQUEyQlIsVUFBVSxJQUFJRixJQUFKLENBQVNFLE1BQVQsQ0FBckMsQ0FBUDtBQUNEOztBQUVELE1BQUlrQixHQUFKLEdBQVc7QUFDVCxXQUFPLElBQUl2QixHQUFKLENBQVEsS0FBS1csS0FBYixDQUFQO0FBQ0Q7O0FBRUQsTUFBSWEsZUFBSixHQUF1QjtBQUNyQixXQUFPdEIsT0FBT3VCLFdBQVAsQ0FBbUIsS0FBS2YsT0FBeEIsQ0FBUDtBQUNEO0FBL0NROztBQWtEWGdCLE9BQU9DLE9BQVAsR0FBaUJ4QixJQUFqQiIsImZpbGUiOiJ0ZWFtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2t5Z2VhciA9IHJlcXVpcmUoJ3NreWdlYXInKVxuY29uc3QgQm90ID0gcmVxdWlyZSgnLi9ib3QnKVxuY29uc3QgZGIgPSByZXF1aXJlKCcuL2RiJylcbmNvbnN0IFN1cnZleSA9IHJlcXVpcmUoJy4vc3VydmV5JylcblxuY2xhc3MgVGVhbSB7XG4gIGNvbnN0cnVjdG9yIChyZWNvcmQpIHtcbiAgICB0aGlzLl9yZWNvcmQgPSByZWNvcmRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgUmVjb3JkICgpIHtcbiAgICByZXR1cm4gc2t5Z2Vhci5SZWNvcmQuZXh0ZW5kKCd0ZWFtJylcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUgKHNsYWNrSUQsIHRva2VuKSB7XG4gICAgbGV0IHJlY29yZCA9IG5ldyBUZWFtLlJlY29yZCh7IHNsYWNrSUQsIHRva2VuIH0pXG4gICAgcmV0dXJuIGRiLnNhdmUocmVjb3JkKS50aGVuKHJlY29yZCA9PiBuZXcgVGVhbShyZWNvcmQpKVxuICB9XG5cbiAgc3RhdGljIG9mIChzbGFja0lEKSB7XG4gICAgbGV0IHF1ZXJ5ID0gbmV3IHNreWdlYXIuUXVlcnkoVGVhbS5SZWNvcmQpXG4gICAgcXVlcnkuZXF1YWxUbygnc2xhY2tJRCcsIHNsYWNrSUQpXG4gICAgcmV0dXJuIGRiLnF1ZXJ5KHF1ZXJ5KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXRpcGxlIGlkZW50aWNhbCB0ZWFtIHJlY29yZHMgZm91bmQnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdFswXSA/IG5ldyBUZWFtKHJlc3VsdFswXSkgOiBudWxsXG4gICAgfSlcbiAgfVxuXG4gIGdldCBzbGFja0lEICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkWydzbGFja0lEJ11cbiAgfVxuXG4gIGdldCB0b2tlbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFsndG9rZW4nXVxuICB9XG5cbiAgc2V0IHRva2VuIChuZXdWYWx1ZSkge1xuICAgIHRoaXMuX3JlY29yZFsndG9rZW4nXSA9IG5ld1ZhbHVlXG4gIH1cblxuICB1cGRhdGUgKCkge1xuICAgIHJldHVybiBkYi5zYXZlKHRoaXMuX3JlY29yZCkudGhlbihyZWNvcmQgPT4gbmV3IFRlYW0ocmVjb3JkKSlcbiAgfVxuXG4gIGdldCBib3QgKCkge1xuICAgIHJldHVybiBuZXcgQm90KHRoaXMudG9rZW4pXG4gIH1cblxuICBnZXQgc2NoZWR1bGVkU3VydmV5ICgpIHtcbiAgICByZXR1cm4gU3VydmV5LnNjaGVkdWxlZEJ5KHRoaXMuc2xhY2tJRClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRlYW1cbiJdfQ==