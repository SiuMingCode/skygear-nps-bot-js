'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { WebClient } = require('@slack/client');
const { extractIDs } = require('./util');

/**
 * @see https://api.slack.com/methods
 */
class Bot {
  constructor(token) {
    this._client = new WebClient(token);
  }

  fetchUser(id) {
    return this._client.users.info(id).then(res => res.user);
  }

  fetchUsers() {
    // neither a bot or a former employee
    return this._client.users.list().then(res => res.members.filter(member => !(member.is_bot || member.name === 'slackbot' || member.deleted)));
  }

  fetchAdmins() {
    return this.fetchUsers().then(users => users.filter(user => user.is_admin));
  }

  fetchIMs() {
    return this._client.im.list().then(res => res.ims);
  }

  fetchIMOf(userID) {
    return this.fetchIMs().then(ims => ims.find(im => im.user === userID));
  }

  fetchIMsOf(usersID) {
    return this.fetchIMs().then(ims => ims.filter(im => usersID.includes(im.user)));
  }

  sendToUser(id, message) {
    var _this = this;

    return _asyncToGenerator(function* () {
      let targetIMID = (yield _this.fetchIMOf(id)).id;
      _this._client.chat.postMessage(targetIMID, message);
    })();
  }

  sendToUsers(ids, message) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      let targetsIMID = extractIDs((yield _this2.fetchIMsOf(ids)));
      targetsIMID.forEach(function (targetIMID) {
        _this2._client.chat.postMessage(targetIMID, message);
      });
    })();
  }

  sendToAdmins(message) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      let adminsID = extractIDs((yield _this3.fetchAdmins()));
      _this3.sendToUsers(adminsID, message);
    })();
  }

  sendToChannel(id, message) {
    this._client.chat.postMessage(id, message);
  }

  distribute(survey) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      let targetsIMID = extractIDs((yield _this4.fetchIMsOf(survey.targetsID)));
      targetsIMID.forEach(function (targetIMID) {
        _this4._client.chat.postMessage(targetIMID, 'How likely is it you would recommend this company as a place to work', {
          attachments: [{
            text: 'Choose a score from 10 (hightest) to 1 (lowest)',
            fallback: 'You are unable to select a score',
            callback_id: 'saveScoreAndRequestReason',
            actions: [{
              name: 'scores',
              type: 'select',
              options: [{
                text: '10',
                value: JSON.stringify({
                  score: 10,
                  surveyID: survey.id
                })
              }, {
                text: '9',
                value: JSON.stringify({
                  score: 9,
                  surveyID: survey.id
                })
              }, {
                text: '8',
                value: JSON.stringify({
                  score: 8,
                  surveyID: survey.id
                })
              }, {
                text: '7',
                value: JSON.stringify({
                  score: 7,
                  surveyID: survey.id
                })
              }, {
                text: '6',
                value: JSON.stringify({
                  score: 6,
                  surveyID: survey.id
                })
              }, {
                text: '5',
                value: JSON.stringify({
                  score: 5,
                  surveyID: survey.id
                })
              }, {
                text: '4',
                value: JSON.stringify({
                  score: 4,
                  surveyID: survey.id
                })
              }, {
                text: '3',
                value: JSON.stringify({
                  score: 3,
                  surveyID: survey.id
                })
              }, {
                text: '2',
                value: JSON.stringify({
                  score: 2,
                  surveyID: survey.id
                })
              }, {
                text: '1',
                value: JSON.stringify({
                  score: 1,
                  surveyID: survey.id
                })
              }]
            }]
          }]
        });
      });
      survey.isSent = true;
      survey.update();
    })();
  }
}

module.exports = Bot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,